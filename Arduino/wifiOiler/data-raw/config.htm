<!DOCTYPE html><html lang="de">
<head>
	<meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="validator:url" content="https://validator.w3.org/nu/">
	<meta name="validator:date" content="2023-03-13">
	<title>Konfiguration</title>
	<link rel="stylesheet" href="wifiOiler.css">
	<script>
		const aConfig = [
			{ key:"wts",type:"number",label:"Wartezeit Simulation" },
			{ key:"nmm",type:"number",label:"Normal Mode Meter" },
			{ key:"rmm",type:"number",label:"Rain Mode Meter" },
			{ key:"omm",type:"number",label:"Offroad Mode Meter" },
			{ key:"sim",type:"number",label:"Meter/s bei Simulation (Wert x 3,6 = km/h)" },
			{ key:"pac",type:"number",label:"Anzahl Pumpaktionen pro Ölvorgang" },
			{ key:"glf",type:"number",label:"GPS Low-Filter (cm)" },
			{ key:"otk",type:"number",label:"Öltank Kapazität" },
			{ key:"use",type:"number",label:"...davon verbraucht" },
			{ key:"ffn",type:"text",  label:"Name neuer Firmware Datei" },
			{ key:"fpw",type:"number",label:"Sek. zw. GPS Trackpoints (0 = no tracks)" },
			{ key:"apn",type:"text",  label:"eigener Host/Access Point Name" },
			{ key:"app",type:"text",  label:"Access Point Passwort" },
			{ key:"uhn",type:"text",  label:"Upload Host Name" },
			{ key:"uhp",type:"number",label:"Upload Host Port" },
			{ key:"url",type:"text",  label:"Upload Host URL" },
			{ key:"bac",type:"text",  label:"User:Password for basic authentication at oilerbase (empty for no basic auth)." },
			{ key:"lgf",type:"bool",  label:"Logging to file?" },
			{ key:"lgs",type:"bool",  label:"Logging to Serial?" },
			{ key:"gdl",type:"bool",  label:"GPS Logging to File?" },
			{ key:"wso",type:"bool",  label:"WiFi automatisch starten?" },
			{ key:"gts",type:"text",  label:"GPS track file: Zusatz vor Dateiname (max. 10 Zeichen). Ohne Zusatz werden die Namen wie folgt gebildet: YYMMDD-HHMM.dat (vor Änderung alle Dateien herunterladen)" },
			{ key:"lvl",type:"number",label:"Log Level (0=Critical,1=Error,2=Warning,3=Info,4=Debug)" },
			{ key:"mrf",type:"number",label:"max. log files (file rotation, 0=none)" },
		]		
		
		var configVal="",line=0,oldval=[];
		const theUrl="/config";
		const $ = function(id){return document.getElementById(id);}
		function msgBase(msg,tpl,func){var mb=$("id_msgbox");mb.innerHTML=msg;mb.appendChild($(tpl).content.cloneNode(true));mb.style.display = "block";mb.addEventListener("keydown", function(e){if (e.keyCode == 27){e.preventDefault();var bno=$("mb_btnNo");if (bno===null) bno=$("mb_btnYes");if (bno!==null) bno.click();}});$("mb_btnYes").focus();$("mb_btnYes").onclick=function(){mb.style.display='none';if (typeof(func)=='function') func();}}
		function meldung(msg, func){msgBase(msg,"onebtn",func);}
		function frage(msg, func){msgBase(msg,"twobtn",func);$("mb_btnNo").onclick = function(){$('id_msgbox').style.display="none";}}
		function aniStart(){$('overlay').style.display = 'block';}
		function aniStop(){$('overlay').style.display = 'none';}
		function buildForm(){
			frm = $('form');
			for (var i = 0; i < aConfig.length; i++){
				// create label
				var obj = document.createElement("label");
				obj.for = aConfig[i]["key"];
				obj.appendChild(document.createTextNode(aConfig[i]["label"]));
				frm.appendChild(obj);
				
				if (aConfig[i]["type"] === "bool"){
					obj = document.createElement("select");
          obj.innerHTML = "<option value=1>Ja</option><option value=0>Nein</option>";
				} else { // "text" or "number"
					obj = document.createElement("input");
					obj.type = aConfig[i]["type"];
				}
				obj.id = aConfig[i]["key"];
  			frm.appendChild(obj);
			}
		}
		function onBodyLoad(){buildForm();getConfig();}
    function setValues(){
			JSON.parse(configVal,function(key,value) {
				var o=$(key);
        if(o!=null) {
          if (key=="bac" && value != "") value=window.atob(value);
					o.value=value;
          oldval[key]=value;
					o.onblur=()=>{check(key)}}})}
		function putConfig(){
			var parms="";
			aniStart();
			JSON.parse(configVal,
        function( key, value ) {
          var o=$(key);
          if (o != null && o.value != value) {
            if (parms.length > 4) parms += "&";
            if (key=="bac") {
              parms+="bac=";
              if (o.value != "") parms += window.btoa(o.value);
            } else if (o.value != ""||key=="gts"){	// gts darf leer sein
              parms += key+"="+ o.value;}}});
			xhr = new XMLHttpRequest();
			xhr.onload=()=>{
				if (xhr.status!=200) meldung("FEHLER "+xhr.responseText);
				window.location.href = "/";}
		  xhr.onloadend=(e)=>{aniStop();}
		  xhr.onerror=(e)=>{meldung("FEHLER: "+xhr.statusText);}
			xhr.open("GET", theUrl+"?"+parms, true);
			xhr.send(null);}
		function getConfig(){
			aniStart();
			xhr = new XMLHttpRequest();
			xhr.onload=()=>{
				if (xhr.status==200){
					configVal=xhr.responseText;
					setValues();
				} else meldung("FEHLER "+xhr.responseText);}
		  xhr.onloadend=(e)=>{aniStop();}
		  xhr.onerror=(e)=>{meldung("FEHLER: "+xhr.statusText);}
			xhr.open("GET", theUrl, true);
			xhr.send(null);}
		function resUse(){$("use").value=0;check("use");}
		function check(id){var o=$(id);if (o!=null)
		  if (o.value != oldval[id]) o.setAttribute('class', 'changed');
			else o.setAttribute('class', '');}
		</script>
	</head>

<body onload="onBodyLoad();">
<p>Ge&auml;nderte Werte werden rot hinterlegt...</p><br>
<div id="form"></div>
<a onclick="putConfig()">Speichern</a>
<a onclick="history.back()">Abbruch</a>
<div id="overlay"><div id="overlay_content"><span id="spinner"></span></div></div>
<div id="id_msgbox"></div>
<template id="onebtn"><br><br><button id="mb_btnYes">OK</button></template>
<template id="twobtn"><br><br><button id="mb_btnYes">Ja</button><button id="mb_btnNo">Nein</button></template>
</body></html>